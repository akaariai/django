=================================
The Django source code repository
=================================


When deploying a Django application into a real production
environment, you will almost always want to use `an official packaged
release of Django`_. However, if you'd like to try out in-development
code from an upcoming release or contribute to the development of
Django, you'll need to obtain a checkout from Django's source code
repository. This document covers the way the code repository is laid
out and how to work with and find things in it.


.. _an official packaged release of Django: https://www.djangoproject.com/download/


High-level overview
===================

The Django source code repository uses `Git`_ to track changes
to the code over time, so you'll need a copy of the Git client
(a program called ``git``) on your computer, and you'll want to
familiarize yourself with the basics of how Git
works. Git's Web site offers downloads for various operating
systems. The site contains also vast amounts of `documentation`_.

The Django Git repository is located online at
`github.com/django/django <https://github.com/django/django>`_. This
repository contains the full source code for all Django releases.
The source code for `djangoproject.com <https://www.djangoproject.com/>`_
Web site can be found from
`github.com/django/djangoproject.com <https://github.com/django/djangoproject.com>`_.

The Django's Git repository contains the ``master`` branch, which is
where the development of the next release of Django happens. In addition
there are stable branches (for example stable/1.4.x) which contains
the latest code for each release of Django. Each release is `tagged`_.

.. _Git: http://git-scm.com/
.. _documentation: http://git-scm.com/documentation
.. _tagged: https://github.com/django/django/tags


Working with Django's master branch
===================================

If you'd like to try out the in-development code for the next release
of Django, or if you'd like to contribute to Django by fixing bugs or
developing new features, you'll want to get the code from the master
branch. (ADD: how to get copy of Git code).

Note that this will get *all* of Django: in addition to the top-level
``django`` module containing Python code, you'll also get a copy of
Django's documentation, unit-test suite, packaging scripts and other
miscellaneous bits. Django's code will be present in your checkout as
a directory named ``django``.

To try out the in-development trunk code with your own applications,
simply place the directory containing your checkout on your Python
import path. Then ``import`` statements which look for Django will find
the ``django`` module within your checkout.

If you're going to be working on Django's code (say, to fix a bug or
develop a new feature), you can probably stop reading here and move
over to :doc:`the documentation for contributing to Django
</internals/contributing/index>`, which covers things like the preferred
coding style and how to generate and submit a patch.


Branches
========

Django uses branches for two main purposes:

1. Development of major or experimental features, to keep them from
   affecting progress on other work in trunk.

2. Security and bug-fix support for older releases of Django, during
   their support lifetimes.


Feature-development branches
----------------------------

Feature-development branches tend by their nature to be
temporary. Some produce successful features which are merged back into
Django's trunk to become part of an official release, but others do
not; in either case there comes a time when the branch is no longer
being actively worked on by any developer. At this point the branch is
considered closed.

Unfortunately, Subversion had no standard way of indicating this. As a
workaround, branches of Django which are closed and no longer
maintained are moved into the directory ``django/branches/attic``.

For reference, the following are branches whose code eventually became
part of Django itself, and so are no longer separately maintained:

* ``boulder-oracle-sprint``: Added support for Oracle databases to
  Django's object-relational mapper. This has been part of Django
  since the 1.0 release.

* ``gis``: Added support for geographic/spatial queries to Django's
  object-relational mapper. This has been part of Django since the 1.0
  release, as the bundled application ``django.contrib.gis``.

* ``i18n``: Added :doc:`internationalization support </topics/i18n/index>` to
  Django. This has been part of Django since the 0.90 release.

* ``magic-removal``: A major refactoring of both the internals and
  public APIs of Django's object-relational mapper. This has been part
  of Django since the 0.95 release.

* ``multi-auth``: A refactoring of :doc:`Django's bundled
  authentication framework </topics/auth>` which added support for
  :ref:`authentication backends <authentication-backends>`. This has
  been part of Django since the 0.95 release.

* ``new-admin``: A refactoring of :doc:`Django's bundled
  administrative application </ref/contrib/admin/index>`. This became part of
  Django as of the 0.91 release, but was superseded by another
  refactoring (see next listing) prior to the Django 1.0 release.

* ``newforms-admin``: The second refactoring of Django's bundled
  administrative application. This became part of Django as of the 1.0
  release, and is the basis of the current incarnation of
  ``django.contrib.admin``.

* ``queryset-refactor``: A refactoring of the internals of Django's
  object-relational mapper. This became part of Django as of the 1.0
  release.

* ``unicode``: A refactoring of Django's internals to consistently use
  Unicode-based strings in most places within Django and Django
  applications. This became part of Django as of the 1.0 release.

Not that when Django moved from SVN to Git, the information about
branch merges was lost. This means that the master branch of Django
doesn't contain merge commits for the above branches.

Additionally, the following branches are closed, but their code was
never merged into Django and the features they aimed to implement
were never finished:

* ``full-history``

* ``generic-auth``

* ``multiple-db-support``

* ``per-object-permissions``

* ``schema-evolution``

* ``schema-evolution-ng``

* ``search-api``

* ``sqlalchemy``

All of the above-mentioned branches now reside in
``attic/`` branches.


Support and bugfix branches
---------------------------

(CHECK: is the supported branches doc up to date?)
In addition to fixing bugs in current trunk, the Django project
provides official bug-fix support for the most recent released version
of Django, and security support for the two most recently-released
versions of Django. This support is provided via branches in which the
necessary bug or security fixes are applied; the branches are then
used as the basis for issuing bugfix or security releases.

These branches can be found in the repository in the ``stable/``
branches, and new branches will be created there after each new Django
release. For example, shortly after the release of Django 1.0, the
branch ``stable/1.0.X`` was created to receive bug fixes, and shortly
after the release of Django 1.1 the branch ``stable/1.1.X`` was created.

Official support for the above mentioned releases has expired, and so
they no longer receive direct maintenance from the Django project
However, the branches continue to exist and interested community members
have occasionally used them to provide unofficial support for old Django
releases.

In addition, the Django's Git repo contains branches for summer of code
development in soc2009/ and soc2010/ branches.


Tags
====

Each Django release is tagged and signed by (??key??). The tags can be
found from github `tags`_ page.

.. _tags: https://github.com/django/django/tags
