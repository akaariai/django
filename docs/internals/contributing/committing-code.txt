===============
Committing code
===============

This section is addressed to the :doc:`/internals/committers` and to anyone
interested in knowing how code gets committed into Django core.

Commit access
-------------

Django has two types of committers:

Core committers
    These are people who have a long history of contributions to Django's
    codebase, a solid track record of being polite and helpful on the
    mailing lists, and a proven desire to dedicate serious time to Django's
    development. The bar is high for full commit access.

Partial committers
    These are people who are "domain experts." They have direct check-in
    access to the subsystems that fall under their jurisdiction, and they're
    given a formal vote in questions that involve their subsystems. This type
    of access is likely to be given to someone who contributes a large
    subframework to Django and wants to continue to maintain it.

    Partial commit access is granted by the same process as full
    committers. However, the bar is set lower; proven expertise in the area
    in question is likely to be sufficient.

Decisions on new committers will follow the process explained in
:ref:`how-we-make-decisions`. To request commit access, please contact an
existing committer privately. Public requests for commit access are potential
flame-war starters, and will be ignored.

Committing guidelines
---------------------

When committing Github pull requests make sure each commit in the pull request
matches commit guidelines mentioned below. Usually there is need to rework the
commit history into accpetable format. It takes the least amount of work if the
committer does the history rewriting. Here is one way to commit a pull
request::

  # Create new branch, tracking upstream/master (upstream is assumed to be
  # django/django).
  git checkout -b pull_xx upstream/master
  # Download the patches from github, apply the patches.
  curl https://github.com/django/django/pull/xx.patch | git am
  # Work on code, use git rebase -i, git commit --amend to make sure the work
  # is commit quality. Then add the work to local master:
  git checkout master
  # Pull upstream changes to make sure your master is up to date.
  git pull upstream master
  # Merge the work as "fast-forward" to master. This will make sure there
  # are no additional merge commite.
  git merge --ff-only pull_xx
  # Check what would be pushed to upstream.
  git push --dry-run upstream master
  # Ensure the work is good quality, and contains only the changes you expect
  # Do the final push
  git push upstream master
  # You can now get rid of the pull_xx branch
  git branch -d pull_xx

Another way is to add the submitter as a new remote, do a checkout of the
branch and work from there::

  git remote add foo <foo's github url>
  # Here pull_xx will be your new local branch name,
  git checkout pull_xx foo foos_pull_branch
  # continue as above

Note that using the Github pull request merge functionality should be used
only if the pull request is 100% ready, and you have checked the pull request
for errors (or trust the request maker enough to skip checks).

When rewriting the commit history for a pull request, the idea is to make sure
Django's commit history is as usable as possible. Some notes for this:

  * If a patch contains back-and-forth commits, then rewrite those into one.
    The typical example is commit adding a method, then a commit which fixes
    some whitespace errors in the previous commit.

  * Separate changes to different commits by logical grouping: if you do a
    whitespace cleanup at the same time you do other changes to a file,
    separating the changes to two different commits will make reviewing history
    easier.

  * Tests should pass and docs should be buildable after each commit.

  * Trivial and small patches usually are best done in one commit. Medium to
    large work should be splitted to multiple commits if possible.

Practicality beats purity, and so it is up to the committer to decide how much
commit history mangling to do for a pull request. The main points are getting
work done, and having an usable commit history. Beware of merge-commits of
upstream branches in the pull requests!

In addition, please follow these guidelines when committing code to Django's
Git repository:

* For any medium-to-big changes, where "medium-to-big" is according to
  your judgment, please bring things up on the `django-developers`_
  mailing list before making the change.

  If you bring something up on `django-developers`_ and nobody responds,
  please don't take that to mean your idea is great and should be
  implemented immediately because nobody contested it. Django's lead
  developers don't have a lot of time to read mailing-list discussions
  immediately, so you may have to wait a couple of days before getting a
  response.

* Write detailed commit messages in the past tense, not present tense.

  * Good: "Fixed Unicode bug in RSS API."
  * Bad: "Fixes Unicode bug in RSS API."
  * Bad: "Fixing Unicode bug in RSS API."

  The commit message should be in lines of 72 chars maximum. There should be
  a subject line, separated by a blank line and then paragraphs of 72 char
  lines. The limits are soft. For the subject line, shorter is better. In the
  body of the commit message more detail is better than less::

    Fixed #18307 -- Added git workflow guidelines

    Refactored the Django's documentation to remove mentions of SVN
    specific tasks. Added guidelines of how to use Git, Github, and
    how to use pull request together with Trac instead.

    You can include thanks in the commit message: Thanks to A for
    suggestions and to B and C for reviews.

* For commits to a branch, prefix the commit message with the branch name.
  For example: "[1.4.x] Fixed #NNNNN -- Added support for mind reading."

* Limit commits to the most granular change that makes sense. This means,
  use frequent small commits rather than infrequent large commits. For
  example, if implementing feature X requires a small change to library Y,
  first commit the change to library Y, then commit feature X in a
  separate commit. This goes a *long way* in helping all core Django
  developers follow your changes.

* Separate bug fixes from feature changes.

  Bug fixes need to be added to the current bugfix branch as well as the
  current trunk.

* If your commit closes a ticket in the Django `ticket tracker`_, begin
  your commit message with the text "Fixed #abc", where "abc" is the
  number of the ticket your commit fixes. Example: "Fixed #123 -- Added
  support for foo". We've rigged Trac so that any commit message in that
  format will automatically close the referenced ticket and post a comment
  to it with the full commit message.

  If your commit closes a ticket and is in a branch, use the branch name
  first, then the "Fixed #abc." For example:
  "[1.4.x] Fixed #123 -- Added whizbang feature."

  FIXME:
  For the curious: we're using a `Trac post-commit hook`_ for this.

  .. _Trac post-commit hook: http://trac.edgewall.org/browser/trunk/contrib/trac-svn-post-commit-hook.cmd

* If your commit references a ticket in the Django `ticket tracker`_ but
  does *not* close the ticket, include the phrase "Refs #abc", where "abc"
  is the number of the ticket your commit references. We've rigged
  Trac so that any commit message in that format will automatically post a
  comment to the appropriate ticket.

* Write commit messages for backports using this pattern::

    [<Django version>] Fixed <ticket> -- <description>

    Backport of <revision> from <branch>.

  For example::

    [1.3.X] Fixed #17028 - Changed diveintopython.org -> diveintopython.net.

    Backport of 80c0cbf1c97047daed2c5b41b296bbc56fe1d7e3 from trunk.

Reverting commits
-----------------

Nobody's perfect; mistakes will be committed. When a mistaken commit is
discovered, please follow these guidelines:

* Never change the published history of django/django branches! If you
  absolutely must (for security reasons for example) first discuss the
  situation with other core committers. Never force-push your changes
  to django/django.

* Try very hard to ensure that mistakes don't happen. Just because we
  have a reversion policy doesn't relax your responsibility to aim for
  the highest quality possible. Really: double-check your work before
  you commit it in the first place!

* If possible, have the original author revert his/her own commit.
  Use git revert - this will make a reverse commit, but the original
  commit will still be part of the commit history.

* Don't revert another author's changes without permission from the
  original author.

* If the original author can't be reached (within a reasonable amount
  of time -- a day or so) and the problem is severe -- crashing bug,
  major test failures, etc -- then ask for objections on the
  `django-developers`_ mailing list then revert if there are none.

* If the problem is small (a feature commit after feature freeze,
  say), wait it out.

* If there's a disagreement between the committer and the
  reverter-to-be then try to work it out on the `django-developers`_
  mailing list. If an agreement can't be reached then it should
  be put to a vote.

* If the commit introduced a confirmed, disclosed security
  vulnerability then the commit may be reverted immediately without
  permission from anyone.

* The release branch maintainer may back out commits to the release
  branch without permission if the commit breaks the release branch.

* If you mistakenly push a topic branch to django/django instead of
  your_nick/django, just delete the branch. So, if you did git push
  upstream ticket_18309, just do a reverse push: git push upstream
  :ticket_18309.

.. _django-developers: http://groups.google.com/group/django-developers
.. _ticket tracker: https://code.djangoproject.com/newticket
